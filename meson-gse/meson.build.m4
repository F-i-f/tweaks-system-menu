# -*- meson -*-
m4_divert(-1)

m4_changequote(`{',`}')
m4_changecom({})

# First, define some macros

# m4 1.4.18 examples/forloop2.m4
# m4_forloop(var, from, to, stmt) - improved version:
#   works even if VAR is not a strict macro name
#   performs sanity check that FROM is larger than TO
#   allows complex numerical expressions in TO and FROM
m4_define({m4_forloop}, {m4_ifelse(m4_eval({($2) <= ($3)}), {1},
  {m4_pushdef({$1})_$0({$1}, m4_eval({$2}),
    m4_eval({$3}), {$4})m4_popdef({$1})})})
m4_define({_m4_forloop},
  {m4_define({$1}, {$2})$4{}m4_ifelse({$2}, {$3}, {},
    {$0({$1}, m4_incr({$2}), {$3}, {$4})})})

# 1.4.18 examples/foreachq4.m4
# m4_foreachq(x, {item_1, item_2, ..., item_n}, stmt)
#   quoted list, version based on forloop
m4_define({m4_foreachq},
{m4_ifelse({$2}, {}, {}, {_$0({$1}, {$3}, $2)})})
m4_define({_m4_foreachq},
{m4_pushdef({$1}, m4_forloop({$1}, {3}, {$#},
  {$0_({1}, {2}, m4_indir({$1}))}){m4_popdef(
    {$1})})m4_indir({$1}, $@)})
m4_define({_m4_foreachq_},
{{m4_define({$$1}, {$$3})$$2{}}})

# The various js interpreters to test for, from most recent to oldest
m4_define({js_versions}, {102, 91, 78, 68, 60, 52})

m4_divert{}m4_dnl
# AUTOGENERATED FILE - DO NOT EDIT
# This file has been generated from meson-gse/meson.build.m4 and meson-gse.build

m4_define({gse_project},
{# meson-gse - Library for gnome-shell extensions
# Copyright (C) 2019-2022 Philippe Troin (F-i-f on Github)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Boilerplate
project('$1',
	version: '$3',
	meson_version: '>= 0.50.0',
	license: 'GPL3' )

gnome = import('gnome')
i18n  = import('i18n')

gse_lib_convenience = files('meson-gse/lib/convenience.js')
gse_lib_logger      = files('meson-gse/lib/logger.js')

gse_gettext_domain  = meson.project_name()
gse_sources	    = files('src/extension.js')
gse_libs	    = []
gse_data	    = []
gse_schemas	    = []
gse_dbus_interfaces = []

gse_run_command_obj = run_command('test', '-f', 'src/prefs.js', check : false)
if gse_run_command_obj.returncode() == 0
  gse_sources += files('src/prefs.js')
endif

gse_run_command_obj = run_command('test', '-f', 'src/stylesheet.css', check : false)
if gse_run_command_obj.returncode() == 0
  gse_data += files('src/stylesheet.css')
endif

gse_schema_main = 'schemas/org.gnome.shell.extensions.'+ meson.project_name() + '.gschema.xml'
gse_run_command_obj = run_command('test', '-f', gse_schema_main, check : false)
if gse_run_command_obj.returncode() == 0
  gse_schemas += files(gse_schema_main)
endif

m4_foreachq({js_version}, {js_versions()}, {gse_js{}js_version() = find_program('js{}js_version()', required: false)
})m4_dnl

# Include extension-specific settings
$4m4_dnl
# End of extension-specific settings

# Boilerplate
gse_run_command_obj = run_command('sh', '-c', 'echo $HOME', check : false)
if gse_run_command_obj.returncode() != 0
  error('HOME not found, exit=@0@'.format(gse_run_command_obj.returncode()))
endif
home     = gse_run_command_obj.stdout().strip()

gse_uuid		 = meson.project_name() + '@$2'
gse_target_dir		 = home + '/.local/share/gnome-shell/extensions/' + gse_uuid
gse_target_dir_schemas   = join_paths(gse_target_dir, 'schemas')
gse_target_locale_dir    = join_paths(gse_target_dir, 'locale')
gse_target_dir_dbus_intf = join_paths(gse_target_dir, 'dbus-interfaces')

meson_extra_scripts      = 'meson-gse/meson-scripts'

gse_metadata_conf = configuration_data()
git_rev_cmd = run_command('git', 'describe', '--tags', '--long', '--always', check : false)
if git_rev_cmd.returncode() != 0
  warning('git rev-parse exit=@0@'.format(git_rev_cmd.returncode()))
  gse_metadata_conf.set('VCS_TAG', 'unknown')
else
  gse_metadata_conf.set('VCS_TAG', git_rev_cmd.stdout().strip())
endif
gse_metadata_conf.set('uuid', gse_uuid)
gse_metadata_conf.set('version', meson.project_version())
gse_metadata_conf.set('gettext_domain', gse_gettext_domain)

gse_data += configure_file(input:         'src/metadata.json.in',
				 output:        'metadata.json',
				 configuration: gse_metadata_conf)

# This should work but doesn't:
#gse_metadata = vcs_tag(command:  ['git', 'rev-parse', 'HEAD'],
#			     input:    files('metadata.json.in'),
#			     output:   'metadata.json',
#			     fallback: 'unknown')
#gse_data += gse_metadata

if gse_schemas != []
  custom_target('gse-gschemas.compiled',
		build_by_default: true,
		command:          ['sh', '-c', 'glib-compile-schemas --targetdir . $(dirname @INPUT0@)'],
		input:            gse_schemas,
		output:           'gschemas.compiled',
		install:          true,
		install_dir:      gse_target_dir_schemas)
  install_data(gse_schemas,
	       install_dir: gse_target_dir_schemas)
endif

gse_js_found = 0
m4_foreachq({js_version}, {js_versions()}, {
if gse_js{}js_version().found() and gse_js_found == 0
  foreach gse_source : gse_sources
    test('Checking syntax of ' + '@0@'.format(gse_source),
	 gse_js{}js_version(),
	 args: ['-w', '-c', gse_source])
  endforeach
  gse_js_found = 1
endif
})m4_dnl

install_data(gse_sources + gse_data + gse_libs,
	     install_dir: gse_target_dir)

install_data(gse_dbus_interfaces,
	     install_dir: gse_target_dir_dbus_intf)

custom_target('gse-extension.zip',
	      build_by_default: false,
	      install: false,
	      command: [files(join_paths(meson_extra_scripts, 'make-extension')), gse_target_dir, '@OUTDIR@', '@OUTPUT@'],
	      output:  'extension.zip')

gse_run_command_obj = run_command('test', '-d', 'po', check : false)
if gse_run_command_obj.returncode() == 0
  subdir('po')
endif})m4_dnl
